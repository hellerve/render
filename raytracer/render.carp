(load "Vector.carp")

(load "https://github.com/carpentry-org/file@0.0.5")

(defmodule Double
  (register MAX Double "DBL_MAX")
  (register MIN Double "DBL_MIN")
)

(deftype Color [
  inner (Vector3 Int)
])

(defmodule Color
  (defn rgb [r g b]
    (init (Vector3.init r g b)))

  (defn red [c]
    @(Vector3.x (inner c)))

  (defn green [c]
    @(Vector3.y (inner c)))

  (defn blue [c]
    @(Vector3.z (inner c)))

  (defn add [a b]
    (init (Vector3.add (inner a) (inner b))))

  (defn mul [c x]
    (init (Vector3.map (fn [e] (to-int (* (from-int e) x))) (inner c))))
)

(deftype Sphere [
  center (Vector3 Double)
  radius Double
  color Color
  specular Double
  reflect Double
  opacity Double
])

(deftype Light
  (Ambient [Double])
  (Point [Double (Vector3 Double)])
  (Directional [Double (Vector3 Double)])
)

(deftype Camera [
  position (Vector3 Double)
  rotation (Vector3 (Vector3 Double))
])

(defmodule Camera
  (defn origin []
    (Camera.init
      (Vector3.init 0.0 0.0 0.0)
      (Vector3.init
        (Vector3.init 1.0 0.0 0.0)
        (Vector3.init 0.0 1.0 0.0)
        (Vector3.init 0.0 0.0 1.0))))
)

(deftype Raytracer [
  spheres (Array Sphere)
  lights (Array Light)
  background-color Color
  camera Camera
])

(defmodule Raytracer
  (def d 1.0)
  (def inf Double.MAX)
  (def recursion-depth 5)

  (defn canvas-to-viewport [x y w h]
    (Vector3.init (/ (from-int x) (from-int w)) (/ (from-int y) (from-int h)) d))

  (defn reflect [r n]
    (Vector3.sub &(Vector3.mul n (* 2.0 (Vector3.dot n r))) r))

  (defn intersect-ray-sphere [o d sphere]
    (let [c (Sphere.center sphere)
          r @(Sphere.radius sphere)
          oc (Vector3.sub o c)

          k1 (Vector3.dot d d)
          k2 (* 2.0 (Vector3.dot &oc d))
          k3 (- (Vector3.dot &oc &oc) (* r r))

          discriminant (- (* k2 k2) (* 4.0 (* k1 k3)))]
      (if (< discriminant 0.0)
        (Pair.init inf inf)
        (let [t1 (/ (+ (neg k2) (sqrt discriminant)) (* 2.0 k1))
              t2 (/ (- (neg k2) (sqrt discriminant)) (* 2.0 k1))]
          (Pair.init t1 t2)))))

  (deftype IntersectionResult [
    closest Double
    closest-sphere (Maybe Sphere)
  ])

  (defn closest-intersection [scene o d tmin tmax]
    (let-do [closest inf
             closest-sphere (Maybe.Nothing)]
      (foreach [sphere (spheres scene)]
        (let [t (intersect-ray-sphere o d sphere)
              t1 @(Pair.a &t)
              t2 @(Pair.b &t)]
          (cond
            (and (between t2 tmin tmax) (< t2 closest))
              (do
                (set! closest t2)
                (set! closest-sphere (Maybe.Just @sphere)))
            (and (between t1 tmin tmax) (< t1 closest))
              (do
                (set! closest t1)
                (set! closest-sphere (Maybe.Just @sphere)))
            ())))
      (IntersectionResult.init closest closest-sphere)))

  (defn new-i [scene p l n i v s tmax]
    (let [ir (closest-intersection scene p l 0.001 tmax)]
      (if (Maybe.just? (IntersectionResult.closest-sphere &ir))
        0.0
        (let [ndl (Vector3.dot n l)]
          (+
            (if (> ndl 0.0)
              (/ (* i ndl) (* (Vector3.mag n) (Vector3.mag l)))
              0.0)
            (if (/= s -1.0)
              (let [r (reflect l n)
                    rdv (Vector3.dot &r v)]
                (if (> rdv 0.0)
                  (* i (Double.pow (/ rdv (* (Vector3.mag &r) (Vector3.mag v))) s))
                  0.0))
              0.0))))))

  (defn lighting [scene p n v s tmax]
    (Array.reduce &(fn [i light]
      (+ i
        (match @light
          (Light.Ambient intensity) intensity
          (Light.Point intensity position)
            (new-i scene p &(Vector3.sub &position p) n intensity v s tmax)
          (Light.Directional intensity direction)
            (new-i scene p &direction n intensity v s tmax))))
      0.0 (lights scene)))

  (defn trace-ray [scene o d tmin tmax depth]
    (let [r (closest-intersection scene o d tmin tmax)
          closest @(IntersectionResult.closest &r)
          closest-sphere @(IntersectionResult.closest-sphere &r)]
      (match closest-sphere
        (Maybe.Nothing) @(background-color scene)
        (Maybe.Just sphere)
          (let [p (Vector3.add o &(Vector3.mul d closest))
                n- (Vector3.sub &p (Sphere.center &sphere))
                n (Vector3.normalize &n-)
                color (Color.mul
                        (Sphere.color &sphere)
                        (lighting scene &p &n
                                        &(Vector3.neg d) @(Sphere.specular &sphere) tmax))
                refl @(Sphere.reflect &sphere)]
            (if (or (<= depth 0) (<= refl 0.0))
              color
              (let [ray (reflect &(Vector3.neg d) &n)
                    reflected (trace-ray scene &p &ray 0.001 tmax (dec depth))
                    new-color (Color.add &(Color.mul &color (- 1.0 refl))
                                         &(Color.mul &reflected refl))
                    opacity @(Sphere.opacity &sphere)]
                (if (or (<= depth 0) (>= opacity 1.0))
                  new-color
                  (let [passed-through (trace-ray scene &p d 0.001 tmax (dec depth))]
                    (Color.add &(Color.mul &new-color opacity)
                               &(Color.mul &passed-through (- 1.0 opacity)))))))))))

  (defn rotate [cam vp]
    (let [r1 (Vector3.x cam)
          r2 (Vector3.y cam)
          r3 (Vector3.z cam)]
      (Vector3.init
        (+
          (* @(Vector3.x r1) @(Vector3.x vp))
          (+ (* @(Vector3.x r2) @(Vector3.y vp))
             (* @(Vector3.x r3) @(Vector3.z vp))))
        (+
          (* @(Vector3.y r1) @(Vector3.x vp))
          (+ (* @(Vector3.y r2) @(Vector3.y vp))
             (* @(Vector3.y r3) @(Vector3.z vp))))
        (+
          (* @(Vector3.z r1) @(Vector3.x vp))
          (+ (* @(Vector3.z r2) @(Vector3.y vp))
             (* @(Vector3.z r3) @(Vector3.z vp))))
      )
    )
  )


  (defn trace [scene name w h]
    (let [f (Result.unsafe-from-success (File.open-with &(str* name ".ppm") "wb+"))
          hw (/ w 2)
          hh (/ h 2)]
      (do
        (ignore (File.write &f &(fmt "P3\n%d %d\n255\n" w h)))
        (for [y hh (neg hh) -1]
          (for [x (neg hw) hw]
            (let-do [cam (camera scene)
                     d (rotate (Camera.rotation cam) &(canvas-to-viewport x y w h))
                     c (trace-ray scene (Camera.position cam) &d 1.0 inf recursion-depth)]
              (ignore
                (File.write &f
                  &(fmt "%d %d %d\n"
                    (Int.min 255 (Color.red &c))
                    (Int.min 255 (Color.green &c))
                    (Int.min 255 (Color.blue &c)))))
              )))
        (File.close f))))
)
